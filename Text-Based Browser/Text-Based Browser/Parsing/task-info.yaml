type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='3.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach='The New York Times',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: |+
    import os, sys, requests
    from collections import deque



    # Variablendeklarationen ------------------------------------------------------------------
    website = ''

    url = []

    dirName = sys.argv[1] #liest den dir name aus den im CLI übergebenen system argumenten (tb_tabs)

    tmpSite = ''# Speichert die aktuell angezeigt Seite

    pages = deque()# Stapel für die Aufgerufenen Dateien


    if not os.path.exists(dirName):
        os.mkdir(dirName)

    # Funktionsdefinitionen ###########################################################
    # Wenn der Dateiname existiert , d.h. wenn die Seite
    def path_exists(dateiname): # vorher schon mal aufgerufen wurde, zeige die Datei an
        file = open(dateiname, 'r', encoding='utf-8')
        print(file.read())
        file.close()
        tmpSite = short
    # ----------------------------------------------------------------------------
    # Funktion zum zusammenbauen der URL
    def check_https(site_input):
        global website
        if site_input.startswith('https://'):
            website = site_input
        else:
            website = 'https://'+site_input
        #print('Website für den Get = ', website)
    #----------------------------------------------------------------------------
    # Funktion für den get request
    def get_request(website):
        #print('Website wurde übergeben an get_request', x)
        r = requests.get(website)
        print(r.text)
        file = open(dateiname, 'w', encoding='utf-8')
        file.write(r.text)


    while True:
        site = input()
        if '.' in site:
            short = site[:site.rfind('.')]#kurzbezeichnung der Seite. Alles nach dem '.' wird abgeschnitten
            url.append(short)
        else:
            short = site # wenn kein '.' im Dateinamen

        if short in url:
            pages.append(tmpSite)
            tmpSite = short

        dateiname = dirName + "\\" + short + ".txt" # dateiname z.B: tb_tabs\bloomberg.txt

        if site == 'exit': #bei Eingabe von exit ist Schluss
            sys.exit()

        if site == 'back':
            print('Diese Seite steht in tmpSite :', tmpSite)
            #print('Diese Seite würde jetzt aufgerufen : ', pages.pop())
            #showVariables(pages.pop())




        elif '.' in site and short in url:
            check_https(site) # prüfung on https for der eingabe steht
            get_request(website) # ruft die seite auf

             # Nach dem die Seite angezeigt wurde,
                                                          # wird jetzt die Datei geschrieben





        elif '.' in site and short not in url:# wenn die Seite nicht in url vorhanden ist
            print('error')                    # drucke eine Fehlermeldung aus
            continue
        else:                               # wenn kein '.' im input und die Seite nicht in url
            print('error')                  # steht, drucke Fehler
            continue




  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/440/implement
status: Solved
record: 5
